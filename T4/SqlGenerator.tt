<#@ template debug="True" language="C#" hostspecific="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ output extension=".txt" #>
<# 
    DTE Dte; 
    var doMultiFile=true;
    //this relies on the nuget packages: T4EnvDte and T4MultiFile
#>
<#@ include file="MultipleOutputHelper.ttinclude" #>
<#@ include file="EnvDteHelper.ttinclude"#>
<#@ include file="SqlGeneration.ttinclude" #> 
<# 
    var manager = Manager.Create(Host, GenerationEnvironment);
    var projects = RecurseSolutionProjects(Dte); 

    var targetProjectName = "ApplicationDatabase";
    var targetInsertRelativePath = @"Scripts\Post-Deployment\TableInserts\Accounting1.5\AccountingInserts.sql";
    var refData= new []{
            new ReferenceData("dbo","GuarantorTypes","GuarantorTypeId",new Dictionary<string,string>()
            {                   
                {"SELF",null},
                {"THIRD PARTY", null},
                {"Insurance & Self", null}
            })       
    };

    var toGen = new [] 
        {               
            new TableInfo
            {
                Name="Payment",
                Schema="dbo",
                Columns = new []
                {
                    new ColumnInfo{Name="PaymentID", Type = typeof(int), 
                        Attributes = new []{"identity","primary key"},
                        },
                    CreateFKeyedColumn<int>("AppointmentId", new FKeyInfo{Schema="dbo",Table="Appointments",Column="AppointmentId"}, /* allowNull= */ true),
                    //new ColumnInfo{Name="AppointmentID", Type = typeof(int)},
                    //    FKey = new FKeyInfo{Schema="dbo",Table="Appointments",Column="AppointmentId"}
                    //    },
                    new ColumnInfo
                    {
                        Name="PaymentTypeId", Type= typeof(string), Length=50,
                        FKey=new FKeyInfo{ Schema="Payments", Table="PaymentType",Column="PaymentTypeId" },
                        GenerateReferenceTable = true,
                        ReferenceValuesWithComment= new Dictionary<string,string>{
                            {"Patient",null},{"ThirdParty",null},
                            {"Era",null}
                            },                     
                        Comments= new[]{
                            "|Patient of PatientIdentifier * PatientPayment |ThirdParty of PayerIdentifier * ThirdPartyPayment |Era of PayerIdentifier * EraPaymentMethod"
                            }
                        },
                    new ColumnInfo{
                        Name="PaymentMethodId", Type = typeof(string),
                        Length=50,
                        GenerateReferenceTable = true,
                        FKey=new FKeyInfo{ Schema="Payments", Table="PaymentMethod"},
                        ReferenceValuesWithComment = new Dictionary<string,string>{
                            {"Cash",null},{"CC",null},{"Check",null},{"Ach",null},{"Fsa",null},{"Other","for when Era amount is 0 or a catch-all"}
                            },
                        },
                    new ColumnInfo{
                        Name="PaymentStatusId", Type = typeof(string),
                        Length=50,
                        GenerateReferenceTable = true,
                        FKey=new FKeyInfo{ Schema="Payments", Table="PaymentStatus"},
                        ReferenceValuesWithComment = new []{"New", "Partial", "Complete"}.ToDictionary(f=>f,f=> (string)null),
                        },
                    new ColumnInfo{
                        Name="TotalAmount", Type = typeof(decimal),
                        Precision=12,Scale=2, // see: http://stackoverflow.com/questions/2377174/how-do-i-interpret-precision-and-scale-of-a-number-in-a-database
                        Comments = new[]{ "was Amount (18,2)"}
                        },
                    CreateUserIdColumn(null, true, "null to allow system inserts/adjustments that aren't done by a user"),
                    CreateFKeyedColumn<int>("PayerID", new FKeyInfo{ Schema="dbo", Table="Payers" }, /* allowNull= */ true),
                    CreatePatientIdColumn(null, true,null),
                    new ColumnInfo{
                        Name="Created", Type = typeof(DateTime),
                        AllowNull=true,
                        Comments = new[]{ "was timestamp"}
                        },
                    new ColumnInfo{
                        Name="TransactionNumber", Type = typeof(string),
                        Length=30,
                        AllowNull=true,
                        Comments = new[]{ "was checkNumber now will store check number or ACH number (when applicable)"}
                        },
                    new ColumnInfo{
                        Name="Rcd", Type = typeof(DateTime),
                        Comments = new []{"Payment Recvd"},
                        AllowNull=true,
                        },
                    new ColumnInfo{
                        Name="IsElectronic", Type = typeof(bool),
                        },
                    CreateFKeyedColumn<int>("CCItemID", new FKeyInfo{ Schema="Payments", Table="CCItem"},true),
                    new ColumnInfo{
                        Name="Comments", Type = typeof(string),
                        UseMax=true,
                        AllowNull=true,
                        },
                    }
                },
            new TableInfo{
                Schema="Payments",
                Name="CCItem",
                Columns = new []
                {
                    new ColumnInfo{
                        Name="CCItemID", Type = typeof(int), Attributes = new []{"identity","primary key"},
                        },
                    MakeNullable50("ResponseCode"),
                    MakeNullable50("ResponseDescription"),
                    MakeNullable50("TransactionID"),
                    MakeNullable50("TransactionType"),
                    MakeNullable50("CardType"),
                    MakeNullable50("MaskedAcctNum"),
                    MakeNullable50("ExpDate"),
                    MakeNullable50("AcctNumSource"),
                    MakeNullable50("CardholderName"),
                    MakeNullable50("Alias"),
                    MakeNullable50("ProcessorResponse"),
                    MakeNullable50("BatchNum"),
                    MakeNullable50("BatchAmount"),
                    MakeNullable50("ApprovalCode"),
                    }
                },
            new TableInfo{
                Schema="Payments",
                Name="PaymentItem",
                Columns = new []{
                    new ColumnInfo{ Name = "PaymentItemID", Type = typeof(int), Attributes = new []{"identity","primary key"}},
                    new ColumnInfo{ Name = "PaymentID", Type = typeof(int), FKey= new FKeyInfo{Schema="dbo",Table="Payment"}},
                    new ColumnInfo{ Name = "PaymentItemTypeId", Type = typeof(string), Length=50,
                        AllowNull=true,
                        GenerateReferenceTable=true, FKey= new FKeyInfo{Schema="Payments", Table="PaymentItemType", Column="PaymentItemTypeId"},
                        ReferenceValuesWithComment = new []{"EraPayment", "EraAdjustment", "PtRespDeductible", "PtRespCoPay","PtRespCoIns","Other"}.ToDictionary(f => f, f => (string)null),
                    },
                    new ColumnInfo{
                        Name="PaymentTierId", Type = typeof(string),
                        Length=50,
                        GenerateReferenceTable = true,
                        AllowNull=true,
                        FKey=new FKeyInfo{ Schema="Payments", Table="PaymentTier",Column="PaymentTierId" },
                        ReferenceValuesWithComment = new []{"Primary", "Secondary", "Tertiary", "Worker'sComp"}.ToDictionary(f=>f,f=> (string)null),
                        },
                    new ColumnInfo{
                        Name="PtRespTypeId", Type = typeof(string),
                        Length=50,
                        GenerateReferenceTable = true,
                        AllowNull=true,
                        FKey=new FKeyInfo{ Schema="Payments", Table="PtRespType",Column="PtRespTypeId" },
                        ReferenceValuesWithComment = new []{"Deductible", "CoIns", "CoPay"}.ToDictionary(f=>f,f=> (string)null),
                        },
                    new ColumnInfo{ Name = "Created", Type= typeof(DateTime)},
                    new ColumnInfo{ Name = "Amount", Type= typeof(decimal), Precision=8, Scale=2},
                    new ColumnInfo{ Name = "PatientResponsiblityAmt", Type = typeof(decimal), Precision=8, Scale=2},
                    CreateFKeyedColumn<int>("ChargeID", new FKeyInfo{Schema="dbo",Table="Charge"},true),
                    MakeNullable50("RemarkCode"),
                    MakeNullable50("AdjustmentCode"),
                    new ColumnInfo{ Name = "PaymentItemStatusId", Type = typeof(string), Length=50,
                        GenerateReferenceTable=true, FKey= new FKeyInfo{Schema="Payments", Table="PaymentItemStatus"},
                        ReferenceValuesWithComment = new []{"Posted", "Unposted"}.ToDictionary(f=>f,f=> (string)null),
                    },
                    new ColumnInfo{
                        Name="Comments", Type = typeof(string),
                        UseMax=true,
                        AllowNull=true,
                    },
                }
            }
        };
#>
Main File Output
<# foreach(var proj in projects){ #>
<#= proj.Name#>
<# } #>
<#
	var targetProject = projects.First(p => p.Name == targetProjectName);
    var targetProjectFolder = Path.GetDirectoryName(targetProject.FullName);

    GenerateTablesAndReferenceTables(manager, targetProject, targetProjectFolder, toGen);
    GenerateAccountingInserts(manager, targetProject, targetProjectFolder, toGen, refData, targetInsertRelativePath);
    manager.Process(doMultiFile); 
#>